// casting
// -----------------------------------------------
// http://hugogiraudel.com/2014/01/27/casting-types-in-sass/
// better than $value + unquote("")
@function to-string($value) {
  @return inspect($value);
}
@function to-bool($value) {
  @return not ($value or $value == "" or $value == 0 or $value == ());
}


// numbers
// -----------------------------------------------
// - generates values in ems based on px sizes
// - $fxBaseFont variable in variables.scss can change scale
// - defaults to 14 if $fxBaseFont is not defined
@function em($val) {
  @if variable-exists(base-font) {
      @return ($val / $fxBaseFont ) * 1em;
  }@else {
      @return ($val / 14 ) * 1em;
  }
}

// turns 100 into 100px
@function px($val) {
  @return #{$val}px;
}

// percent-of(100px, 1000px) -> 10%
@function percent-of($in, $out) {
  @return ($in / $out) * 100%;
}

// - handy functions borrowed from hugo
// - http://hugogiraudel.com/2013/08/12/sass-functions/
// turns 100px into 100
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

// ensure number is between two values:
// clamp($val, 10, 100) -> if $val is 101, will return 100
// percentage(clamp($value, 0, 100) -> return as a %
@function clamp($value, $min, $max) {
  @return if($value > $max, $max, if($value < $min, $min, $value));
}


// lists
// -----------------------------------------------
// - http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/
// $list: a, b, c, d, e, f;
// $first: first($list); // a
// $last: last($list);   // f
@function first($list) {
  @return nth($list, 1);
}

@function second($list) {
  @return nth($list, 2);
}

@function third($list) {
  @return nth($list, 3);
}

@function last($list) {
  @return nth($list, length($list));
}

@function last-index($list, $value) {
  $index: null;

  @for $i from 1 through length($list) {
    @if nth($list, $i) == $value {
      $index: $i;
    }
  }

  @return $index;
}

// $list: b, c, d, e, f;
// $new-list: prepend($list, a);               // a, b, c, d, e, f
// $new-list: prepend($list, now i know my a); // now, i, know, my, a, b, c, d, e, f
@function prepend($list, $value) {
  @return join($value, $list);
}


// font size
// -----------------------------------------------
// outputs px & rem:
//  font-size: 16px;
//  font-size: 1.6rem;
//  /* =$size + px */
@mixin rem-font-size ($size) {
  font-size: $size + px; font-size: ($size / 10) + rem; /* =$size + px */
}


// generating class & attr names
// -----------------------------------------------

// for standard dashed class names like:
// <name>-<mod>
// flex
// row-inline
// NOTE: does not return a valid selector!
@function make-dash-name($name, $mod, $fxPrefix) {
  @if $mod {
    @return #{$fxPrefix}#{$name}-#{$mod};
  }
  @return #{$fxPrefix}#{$name};
}

// for attr names that are key-value pairs:
// <name>="<mod>"
// basis="auto"
// NOTE: does not return a valid selector!
@function make-key-eq-val-name($name, $mod, $fxPrefix) {
  //
  // @if type-of($name) != "string" {
  //   @warn "$name: `#{$name}` is not a string";
  // }
  //
  // @if type-of($mod) != "string" {
  //   @warn "$mod: `#{$mod}` is not a string";
  // }
  @if $mod {
    @return '#{$fxPrefix}#{$name}="#{$mod}"';
  }
  @return false;
}

// generates class selector names, for the most part adding the `.`
// .row
// .row-reverse
// .row.reverse
@function make-class-names($name, $mod, $fxPrefix) {
  $dash-name: make-dash-name($name, $mod, $fxPrefix);
  // note: we don't need key-val-name for classes, but its a proxy for now
  $key-val-name: make-key-eq-val-name($name, $mod, $fxPrefix);
  @if $key-val-name {
    @if(type-of($mod) == string) {
      @return '.#{$dash-name}, .#{$name}.#{$mod}';
    }
  }
  @return '.#{$dash-name}';
}

// Brief overview of attribute selectors:
// [attr="value"] exact match value
// [attr~="value"] attr contains value
// [attr*="value"] attr contains value, more inclusive
// [attr|="value"] attr begins with a value
// [attr^="value"] attr begins with a value, more inclusive
// [attr$="value"] attr ends with a value
//
//
// generates attr selector names, which have multiple forms:
// [row]
// [row="reverse"]
// [row-reverse]
// [row][reverse]
//
// TODO: should we generate data-* attrs?
//
@function make-attr-names($name, $mod, $fxPrefix) {
  $key-val-name: make-key-eq-val-name($name, $mod, $fxPrefix);
  $dash-name: make-dash-name($name, $mod, $fxPrefix);

  // if we have a key="val" name generated,
  // we can also create [key][val]
  @if $key-val-name {
    @if(type-of($mod) == string) {
      @return '[#{$key-val-name}], [#{$dash-name}], [#{$fxPrefix}#{$name}][#{$fxPrefix}#{$mod}]';
    } @else {
      @return '[#{$key-val-name}], [#{$dash-name}]';
    }
  }
  @return '[#{$dash-name}]';
}
